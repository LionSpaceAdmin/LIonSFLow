{
  "permissions": {
    "allow": [
      "Bash(npm run dev:*)",
      "Bash(npm run build:*)",
      "Bash(npm run lint:*)",
      "Bash(npm run test:*)",
      "Bash(npm run type-check:*)",
      "Bash(npx next:*)",
      "Write(app/**/*)",
      "Write(src/**/*)",
      "Write(components/**/*)",
      "Write(lib/**/*)",
      "Write(public/**/*)",
      "Read(next.config.js)",
      "Read(package.json)",
      "Read(tsconfig.json)",
      "Edit(tailwind.config.js)",
      "Bash(npx shadcn@latest:*)",
      "Bash(npx prettier:*)",
      "Bash(npx eslint:*)",
      "Write(styles/**/*)",
      "Read(components.json)",
      "Read(tailwind.config.js)",
      "Edit(components.json)",
      "Read",
      "Grep",
      "Glob",
      "LS",
      "Bash(npm test:*)",
      "Bash(git status:*)",
      "Bash(git diff:*)",
      "Bash(git log:*)",
      "Bash(npm install:*)",
      "Bash(npm init:*)",
      "Bash(npx:*)",
      "Bash(npx drizzle-kit:*)",
      "Bash(psql:*)",
      "Bash(cat:*)",
      "Bash(echo:*)",
      "Bash(mkdir:*)",
      "Bash(touch:*)",
      "Bash(cp:*)",
      "Bash(mv:*)",
      "Bash(node:*)",
      "Bash(tsx:*)",
      "Bash(ts-node:*)",
      "Write(**/*.ts)",
      "Write(**/*.json)",
      "Write(**/*.js)",
      "Write(**/*.tsx)",
      "Write(**/*.jsx)",
      "Write(**/*.md)",
      "Write(**/*.sql)",
      "Write(**/*.sh)",
      "Write(.env.example)",
      "Write(drizzle.config.ts)",
      "MultiEdit(**/*.ts)",
      "MultiEdit(**/*.json)",
      "Edit",
      "MultiEdit",
      "Write",
      "NotebookEdit",
      "NotebookRead",
      "TodoWrite",
      "WebSearch",
      "WebFetch",
      "Bash(npm run dev*)",
      "Bash(npm run build*)",
      "Bash(npm run test*)",
      "Bash(npm run lint*)",
      "Bash(npm run typecheck*)",
      "Bash(npm install*)",
      "Bash(npm ci*)",
      "Bash(npx tsx*)",
      "Bash(npx fastmcp*)",
      "Bash(ngrok http*)",
      "Bash(git status*)",
      "Bash(git diff*)",
      "Bash(git log*)",
      "Bash(git add*)",
      "Bash(git commit*)",
      "Bash(curl https://rpc.testnet.radiustech.xyz*)",
      "Bash(echo $EVMAUTH*)",
      "Bash(docker build*)",
      "Bash(docker run*)",
      "Bash(npm:*)",
      "Bash(pnpm:*)",
      "Bash(yarn:*)",
      "Bash(git:*)",
      "Bash(curl:*)",
      "Bash(rm:*)",
      "Bash(ls:*)",
      "Bash(grep:*)",
      "Bash(find:*)",
      "Bash(jq:*)",
      "Bash(vercel:*)",
      "Bash(docker:*)",
      "Task",
      "Bash(npm run db:*)",
      "Bash(npm run migrate:*)",
      "Bash(npm run seed:*)",
      "Write(drizzle/**/*)",
      "Write(src/schema/**/*)",
      "Write(src/lib/db.ts)",
      "Read(drizzle.config.ts)",
      "Bash(npx tailwindcss:*)",
      "Bash(npx @tailwindcss/*:*)",
      "Write(pages/**/*)",
      "Edit(globals.css)",
      "Edit(src/styles/**/*)"
    ],
    "deny": [
      "Read(.env.production)",
      "Read(.env.local)",
      "Write(.env)",
      "Bash(rm -rf:*)",
      "Bash(npm publish:*)",
      "Read(node_modules/**)",
      "Write(node_modules/**)",
      "Read(./.env)",
      "Read(./.env.local)",
      "Read(./.env.production)",
      "Read(./secrets/**)",
      "Read(./node_modules/**)",
      "Bash(git push:*)",
      "Write(./.env)",
      "Write(./.env.local)",
      "Write(./.env.production)",
      "Read(**/*private*key*)",
      "Read(**/*.env.production)",
      "Read(**/*secret*)",
      "Write(**/*private*key*)",
      "Write(**/*.env.production)",
      "Write(**/*secret*)",
      "Bash(rm -rf*)",
      "Bash(npm publish*)",
      "Bash(curl -X POST*)",
      "Bash(curl -X PUT*)",
      "Bash(curl -X DELETE*)",
      "Bash(sudo:*)",
      "Bash(su:*)",
      "Read(.env)",
      "Read(.env.*)",
      "Read(*/secrets/*)",
      "Read(**/secrets/**)",
      "Write(.env.*)"
    ]
  },
  "env": {
    "NODE_ENV": "development",
    "NEXT_PUBLIC_APP_ENV": "development",
    "SHADCN_STYLE": "new-york",
    "SHADCN_BASE_COLOR": "zinc",
    "CLAUDE_BASH_MAINTAIN_PROJECT_WORKING_DIR": "1",
    "DATABASE_URL": "postgresql://user:pass@host/dbname?sslmode=require",
    "OPENAI_API_KEY": "sk-your-openai-api-key-here",
    "MCP_SERVER_PORT": "3000",
    "LOG_LEVEL": "info",
    "VECTOR_SEARCH_LIMIT": "10",
    "SIMILARITY_THRESHOLD": "0.7",
    "MEMORY_EXPIRATION_DAYS": "90",
    "MAX_MEMORIES_PER_USER": "10000",
    "IMPORTANCE_DECAY_RATE": "0.1",
    "EVMAUTH_CONTRACT_ADDRESS": "0x5448Dc20ad9e0cDb5Dd0db25e814545d1aa08D96",
    "EVMAUTH_CHAIN_ID": "1223953",
    "EVMAUTH_RPC_URL": "https://rpc.testnet.radiustech.xyz",
    "EVMAUTH_TOKEN_ID": "1",
    "DEBUG": "false",
    "RADIUS_TESTNET": "true",
    "AI_SDK_EXPERT_MODE": "advanced",
    "CLAUDE_CODE_AI_SDK_CONFIG": "loaded",
    "ENABLE_REASONING_MODELS": "true",
    "ENABLE_COMPUTER_USE": "true",
    "ENABLE_GENERATIVE_UI": "true",
    "ENABLE_EDGE_OPTIMIZATION": "true",
    "ENABLE_ADVANCED_MONITORING": "true",
    "TAILWIND_CONFIG": "tailwind.config.js",
    "TAILWIND_DARK_MODE": "class"
  },
  "hooks": {
    "PreToolUse": [
      {
        "hooks": [
          {
            "type": "command",
            "command": "echo 'Creating/updating file: $FILE_PATH'",
            "timeout": 5
          }
        ],
        "matcher": "Write"
      },
      {
        "hooks": [
          {
            "type": "command",
            "command": "echo 'Command logged' >> ~/.claude/command-log.txt"
          }
        ],
        "matcher": "Bash"
      },
      {
        "hooks": [
          {
            "type": "command",
            "command": "#!/bin/bash\nfile_path=$(echo \"$CLAUDE_HOOK_DATA\" | jq -r '.tool_input.file_path // empty')\nif [[ \"$file_path\" == *.ts || \"$file_path\" == *.tsx ]]; then\n  # Check if we're writing token configuration\n  if echo \"$CLAUDE_HOOK_DATA\" | jq -r '.tool_input.content // .tool_input.new_string // \"\"' | grep -q 'contractAddress\\|chainId\\|tokenId'; then\n    echo \"üîê Token configuration detected - validating...\"\n    # Validate contract address format\n    if echo \"$CLAUDE_HOOK_DATA\" | grep -q '0x[a-fA-F0-9]\\{40\\}'; then\n      echo \"‚úÖ Valid contract address format\"\n    else\n      echo \"‚ö†Ô∏è  Warning: Invalid contract address format detected\"\n    fi\n  fi\nfi"
          }
        ],
        "matcher": "Edit|MultiEdit|Write"
      },
      {
        "hooks": [
          {
            "type": "command",
            "command": "#!/bin/bash\ncommand=$(echo \"$CLAUDE_HOOK_DATA\" | jq -r '.tool_input.command')\n# Log FastMCP and ngrok commands for debugging\nif [[ \"$command\" == *\"fastmcp\"* ]] || [[ \"$command\" == *\"ngrok\"* ]]; then\n  echo \"[Token-Gate Debug] Running: $command\" >> ~/.claude/token-gate-debug.log\nfi"
          }
        ],
        "matcher": "Bash"
      },
      {
        "hooks": [
          {
            "type": "command",
            "command": "jq -r '.tool_input.file_path' | { read file_path; if echo \"$file_path\" | grep -q '\\.env'; then echo \"üîí WARNING: Writing to environment file. Ensure no secrets are committed!\"; echo \"üîë AI SDK environment variables checklist:\"; echo \"  ‚Ä¢ ANTHROPIC_API_KEY for Claude models\"; echo \"  ‚Ä¢ OPENAI_API_KEY for GPT models\"; echo \"  ‚Ä¢ Provider-specific configurations\"; echo \"  ‚Ä¢ Edge runtime settings\"; fi; }"
          },
          {
            "type": "command",
            "command": "jq -r '.tool_input.file_path' | { read file_path; if echo \"$file_path\" | grep -q 'api.*route'; then echo \"üõ°Ô∏è Creating AI SDK API route: $file_path\"; echo \"üìã Advanced implementation checklist:\"; echo \"  ‚úÖ Edge Runtime compatibility (runtime = 'edge')\"; echo \"  ‚úÖ Advanced streaming with timeouts\"; echo \"  ‚úÖ Multi-step tool execution with stopWhen\"; echo \"  ‚úÖ Background processing with waitUntil\"; echo \"  ‚úÖ Provider fallback mechanisms\"; echo \"  ‚úÖ Comprehensive error handling\"; echo \"  ‚úÖ Rate limiting and security\"; echo \"  ‚úÖ Performance monitoring integration\"; fi; }"
          },
          {
            "type": "command",
            "command": "jq -r '.tool_input.file_path' | { read file_path; if echo \"$file_path\" | grep -q 'next\\.config'; then echo \"‚öôÔ∏è Next.js configuration update: $file_path\"; echo \"üöÄ Advanced AI SDK optimizations:\"; echo \"  ‚Ä¢ Edge Runtime configuration\"; echo \"  ‚Ä¢ Bundle optimization for AI SDK\"; echo \"  ‚Ä¢ Streaming response headers\"; echo \"  ‚Ä¢ Performance monitoring setup\"; fi; }"
          },
          {
            "type": "command",
            "command": "jq -r '.tool_input.file_path' | { read file_path; if echo \"$file_path\" | grep -q 'vercel\\.json'; then echo \"üåê Vercel configuration detected: $file_path\"; echo \"‚ö° Edge deployment optimizations:\"; echo \"  ‚Ä¢ Regional function deployment\"; echo \"  ‚Ä¢ Edge Runtime configuration\"; echo \"  ‚Ä¢ Custom headers for AI responses\"; echo \"  ‚Ä¢ Performance monitoring setup\"; fi; }"
          }
        ],
        "matcher": "Write"
      },
      {
        "hooks": [
          {
            "type": "command",
            "command": "jq -r '.tool_input.command' | { read cmd; if echo \"$cmd\" | grep -q 'rm.*-rf'; then echo \"‚ö†Ô∏è CAUTION: Destructive operation detected!\"; echo \"Please review: $cmd\"; echo \"üíæ Consider backing up important AI models/data first\"; fi; }"
          },
          {
            "type": "command",
            "command": "jq -r '.tool_input.command' | { read cmd; if echo \"$cmd\" | grep -q 'git.*push'; then echo \"üì§ Git push detected\"; echo \"üîç Pre-push AI SDK checklist:\"; echo \"  ‚Ä¢ No API keys in commits\"; echo \"  ‚Ä¢ AI SDK dependencies updated\"; echo \"  ‚Ä¢ Tests passing\"; echo \"  ‚Ä¢ Performance benchmarks acceptable\"; fi; }"
          }
        ],
        "matcher": "Bash"
      }
    ],
    "PostToolUse": [
      {
        "hooks": [
          {
            "type": "command",
            "command": "npx prettier --write $FILE_PATH",
            "timeout": 10
          }
        ],
        "matcher": "Write|Edit"
      },
      {
        "hooks": [
          {
            "type": "command",
            "command": "npx prettier --write",
            "timeout": 10
          }
        ],
        "matcher": "Write|Edit"
      },
      {
        "hooks": [
          {
            "type": "command",
            "command": "date '+File modified at %Y-%m-%d %H:%M:%S'",
            "timeout": 5
          },
          {
            "type": "command",
            "command": "$CLAUDE_PROJECT_DIR/.claude/hooks/typescript-dev.sh",
            "timeout": 10
          }
        ],
        "matcher": "Edit|MultiEdit|Write"
      },
      {
        "hooks": [
          {
            "type": "command",
            "command": "#!/bin/bash\nfile_path=$(echo \"$CLAUDE_HOOK_DATA\" | jq -r '.tool_input.file_path // empty')\n# Auto-format TypeScript files\nif [[ \"$file_path\" == *.ts || \"$file_path\" == *.tsx ]]; then\n  if command -v npx &> /dev/null && [ -f \"package.json\" ]; then\n    npx prettier --write \"$file_path\" 2>/dev/null || true\n  fi\nfi\n# Validate token-gating implementation\nif [[ \"$file_path\" == *server.ts* ]] || [[ \"$file_path\" == *index.ts* ]]; then\n  if grep -q 'radius.protect' \"$file_path\"; then\n    echo \"‚úÖ Token protection detected in $file_path\"\n  fi\nfi"
          }
        ],
        "matcher": "Edit|MultiEdit|Write"
      },
      {
        "hooks": [
          {
            "type": "command",
            "command": "jq -r '.tool_input.file_path' | { read file_path; if echo \"$file_path\" | grep -q '\\.(ts|tsx|js|jsx)$'; then echo \"üîß Formatting $file_path with Prettier...\"; npx prettier --write \"$file_path\" 2>/dev/null || echo \"‚ö†Ô∏è Prettier not available\"; fi; }"
          },
          {
            "type": "command",
            "command": "jq -r '.tool_input.file_path' | { read file_path; if echo \"$file_path\" | grep -q 'api.*route\\.(ts|js)$'; then echo \"üöÄ AI SDK API route detected: $file_path\"; echo \"üìã Advanced checklist:\"; echo \"  ‚Ä¢ Edge Runtime compatibility (runtime = 'edge')\"; echo \"  ‚Ä¢ Streaming with proper timeouts\"; echo \"  ‚Ä¢ Error boundaries and recovery\"; echo \"  ‚Ä¢ Rate limiting and security\"; echo \"  ‚Ä¢ Monitoring and analytics integration\"; fi; }"
          },
          {
            "type": "command",
            "command": "jq -r '.tool_input.file_path' | { read file_path; if echo \"$file_path\" | grep -q 'package\\.json$'; then echo \"üì¶ Package.json updated: $file_path\"; echo \"üîÑ Run 'npm install' to sync dependencies\"; echo \"üí° Consider updating Vercel config for Edge Runtime\"; fi; }"
          },
          {
            "type": "command",
            "command": "jq -r '.tool_input.file_path' | { read file_path; if echo \"$file_path\" | grep -q 'streamUI\\|generateUI'; then echo \"üé® Generative UI detected: $file_path\"; echo \"‚ú® Advanced UI features available:\"; echo \"  ‚Ä¢ Dynamic component streaming\"; echo \"  ‚Ä¢ Real-time chart generation\"; echo \"  ‚Ä¢ Interactive form creation\"; echo \"  ‚Ä¢ Dashboard widgets\"; fi; }"
          },
          {
            "type": "command",
            "command": "jq -r '.tool_input.file_path' | { read file_path; if echo \"$file_path\" | grep -q 'computer.*tool\\|computer_20241022'; then echo \"üñ•Ô∏è Computer Use implementation detected: $file_path\"; echo \"üîê Security reminders:\"; echo \"  ‚Ä¢ Validate all actions before execution\"; echo \"  ‚Ä¢ Implement rate limiting\"; echo \"  ‚Ä¢ Add permission controls\"; echo \"  ‚Ä¢ Log all computer interactions\"; fi; }"
          },
          {
            "type": "command",
            "command": "jq -r '.tool_input.file_path' | { read file_path; if echo \"$file_path\" | grep -q 'o1-preview\\|o1-mini\\|deepseek.*reasoner'; then echo \"üß† Reasoning model detected: $file_path\"; echo \"üí≠ Reasoning optimizations:\"; echo \"  ‚Ä¢ Enable thinking mode visibility\"; echo \"  ‚Ä¢ Increase token limits (8K-32K)\"; echo \"  ‚Ä¢ Add reasoning-specific prompts\"; echo \"  ‚Ä¢ Monitor thinking token usage\"; fi; }"
          }
        ],
        "matcher": "Write|Edit|MultiEdit"
      },
      {
        "hooks": [
          {
            "type": "command",
            "command": "jq -r '.tool_input.command' | { read cmd; if echo \"$cmd\" | grep -q 'npm install.*@ai-sdk'; then echo \"ü§ñ AI SDK dependency installed!\"; echo \"üåü Advanced features now available:\"; echo \"  ‚Ä¢ Reasoning models (O1, O3-mini, DeepSeek R1)\"; echo \"  ‚Ä¢ Computer use capabilities\"; echo \"  ‚Ä¢ Generative UI with streamUI\"; echo \"  ‚Ä¢ Multi-modal streaming\"; echo \"  ‚Ä¢ Edge runtime optimization\"; fi; }"
          },
          {
            "type": "command",
            "command": "jq -r '.tool_input.command' | { read cmd; if echo \"$cmd\" | grep -q 'npm.*test'; then echo \"üß™ Tests completed\"; echo \"üìä Advanced testing coverage:\"; echo \"  ‚Ä¢ Streaming response validation\"; echo \"  ‚Ä¢ Error recovery mechanisms\"; echo \"  ‚Ä¢ Tool execution testing\"; echo \"  ‚Ä¢ Edge runtime compatibility\"; echo \"  ‚Ä¢ Performance benchmarks\"; fi; }"
          },
          {
            "type": "command",
            "command": "jq -r '.tool_input.command' | { read cmd; if echo \"$cmd\" | grep -q 'vercel.*deploy'; then echo \"üöÄ Vercel deployment detected\"; echo \"‚ö° Edge optimization reminders:\"; echo \"  ‚Ä¢ Verify Edge Runtime configuration\"; echo \"  ‚Ä¢ Check bundle size limits\"; echo \"  ‚Ä¢ Test regional performance\"; echo \"  ‚Ä¢ Monitor cold start times\"; fi; }"
          },
          {
            "type": "command",
            "command": "jq -r '.tool_input.command' | { read cmd; if echo \"$cmd\" | grep -q 'build'; then echo \"üèóÔ∏è Build process initiated\"; echo \"üîç Advanced build checks:\"; echo \"  ‚Ä¢ TypeScript compilation\"; echo \"  ‚Ä¢ Bundle analysis\"; echo \"  ‚Ä¢ Dependency optimization\"; echo \"  ‚Ä¢ Performance profiling\"; fi; }"
          }
        ],
        "matcher": "Bash"
      },
      {
        "hooks": [
          {
            "type": "command",
            "command": "npx prettier --write $FILE_PATH",
            "timeout": 10
          }
        ],
        "matcher": "Write"
      },
      {
        "hooks": [
          {
            "type": "command",
            "command": "npx prettier --write",
            "timeout": 10
          }
        ],
        "matcher": "Write|Edit"
      }
    ],
    "Stop": [
      {
        "hooks": [
          {
            "type": "command",
            "command": "#!/bin/bash\n# Check if debug mode is still enabled\nif [ \"$DEBUG\" = \"true\" ]; then\n  echo \"‚ö†Ô∏è  Reminder: Debug mode is enabled. Disable before production deployment!\"\nfi\n# Check if using testnet\nif [ \"$RADIUS_TESTNET\" = \"true\" ]; then\n  echo \"‚ÑπÔ∏è  Using Radius Testnet (Chain ID: 1223953)\"\nfi"
          }
        ]
      },
      {
        "hooks": [
          {
            "type": "command",
            "command": "if [ -f \"package.json\" ] && grep -q '@ai-sdk' package.json; then echo \"\\nüéØ Advanced AI SDK Development Session Complete\"; echo \"\\nüöÄ Cutting-edge AI features implemented:\"; echo \"  ‚ú® Generative UI with streamUI\"; echo \"  üß† Reasoning models (O1, O3-mini, DeepSeek)\"; echo \"  üñ•Ô∏è Computer use automation\"; echo \"  ‚ö° Edge runtime optimization\"; echo \"  üìä Performance monitoring\"; echo \"  üîß Advanced streaming patterns\"; echo \"\\nüìã Final production checklist:\"; echo \"  ‚úì Streaming responses optimized?\"; echo \"  ‚úì Error boundaries implemented?\"; echo \"  ‚úì Edge runtime configured?\"; echo \"  ‚úì Monitoring and analytics active?\"; echo \"  ‚úì Security measures in place?\"; echo \"  ‚úì Performance tested?\"; echo \"  ‚úì Cost tracking enabled?\"; echo \"\\nüåü Ready to deploy next-generation AI experiences!\"; fi"
          }
        ]
      }
    ],
    "Notification": [
      {
        "hooks": [
          {
            "type": "command",
            "command": "echo \"ü§ñ Claude Code Advanced AI SDK Expert is ready!\"; echo \"\\nüåü Advanced capabilities available:\"; echo \"  üß† Reasoning Models (O1, O3-mini, DeepSeek R1)\"; echo \"  üñ•Ô∏è Computer Use Automation\"; echo \"  üé® Generative UI with streamUI\"; echo \"  ‚ö° Edge Runtime Optimization\"; echo \"  üìä Performance Monitoring\"; echo \"  üîß Multi-step Agent Workflows\"; echo \"\\nüí° Use specialized agents and commands for advanced features!\""
          }
        ]
      }
    ]
  },
  "statusLine": {
    "type": "command",
    "command": "echo 'üé® Tailwind CSS | $(basename $(pwd))'"
  }
}