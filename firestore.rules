/**
 * @file Firestore Security Rules
 * @core_philosophy This ruleset secures access to the Firestore database.
 *  It allows public read access to all data (workflows and node definitions) and requires user authentication for write operations.
 * @data_structure Workflows are stored in the `/workflows/{workflowId}` collection, while node definitions are stored in `/node_definitions/{nodeDefinitionId}`.
 * @key_security_decisions All read operations are publicly accessible. All write operations require authentication.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants public read access and requires authentication for write access to workflow documents.
     * @path /workflows/{workflowId}
     * @allow (get, list) Public read access is allowed.
     * @allow (create, update, delete) Authenticated users can create, update, and delete workflows.
     * @deny (create, update, delete) Unauthenticated users cannot create, update, or delete workflows.
     * @principle Allows public read access and requires authentication for write operations.
     */
    match /workflows/{workflowId} {
      allow get, list: if true;
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Grants public read access and requires authentication for write access to node definition documents.
     * @path /node_definitions/{nodeDefinitionId}
     * @allow (get, list) Public read access is allowed.
     * @allow (create, update, delete) Authenticated users can create, update, and delete node definitions.
     * @deny (create, update, delete) Unauthenticated users cannot create, update, or delete node definitions.
     * @principle Allows public read access and requires authentication for write operations.
     */
    match /node_definitions/{nodeDefinitionId} {
      allow get, list: if true;
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Checks if the user is signed in.
     * @return True if the user is signed in, false otherwise.
     * @principle Ensures that only authenticated users can perform certain operations.
     */
    function isSignedIn() {
      return request.auth != null;
    }
  }
}