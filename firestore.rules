/**
 * @fileoverview Firestore Security Rules for Auron Platform
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles and workflows,
 * while providing public read access to node definitions and their parameters.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, accessible only to the owner.
 * - /users/{userId}/workflows/{workflowId}: Stores workflows created by users, accessible only to the owner.
 * - /node_definitions/{nodeDefinitionId}: Stores global node definitions, publicly readable.
 * - /node_definitions/{nodeDefinitionId}/parameters/{nodeParameterId}: Stores node parameters, publicly readable.
 *
 * Key Security Decisions:
 * - Users can only access their own data (profiles and workflows).
 * - Node definitions and parameters are publicly readable but not writable via the client.  These should be managed via the Firebase Admin SDK.
 * - Denormalization of userId within the Workflow document allows for efficient and secure workflow access rules.
 * - Listing operations for workflows is restricted to the owner.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profiles.
     * @path /users/{userId}
     * @allow (create) - User with ID 'user123' can create their profile.
     * @allow (get, update, delete) - User with ID 'user123' can get, update, or delete their own profile.
     * @deny (create) - User with ID 'user123' cannot create a profile with a different ID ('user456').
     * @deny (get, update, delete) - User with ID 'user123' cannot get, update, or delete the profile of another user ('user456').
     * @principle Enforces document ownership for all operations on user profiles.
     */
    match /users/{userId} {
      // Function to check if the request is made by the owner of the user document.
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      // Function to check if the request is made by the owner of an existing user document.
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false; // Listing all users is not permitted.
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id; // Immutable id check
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to workflows owned by a user.
     * @path /users/{userId}/workflows/{workflowId}
     * @allow (create) - User with ID 'user123' can create a workflow under their profile.
     * @allow (get, update, delete) - User with ID 'user123' can get, update, or delete their own workflow.
     * @deny (create) - User with ID 'user123' cannot create a workflow with a different userId.
     * @deny (get, update, delete) - User with ID 'user123' cannot get, update, or delete a workflow owned by another user ('user456').
     * @principle Enforces document ownership for all operations on workflows.
     */
    match /users/{userId}/workflows/{workflowId} {
      // Function to check if the request is made by the owner of the workflow document.
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      // Function to check if the request is made by the owner of an existing workflow document.
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId; // Immutable userId check
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to node definitions.
     * @path /node_definitions/{nodeDefinitionId}
     * @allow (get, list) - Any user can get or list node definitions.
     * @deny (create, update, delete) - No user can create, update, or delete node definitions via client.
     * @principle Provides public read access to node definitions while restricting write access.
     */
    match /node_definitions/{nodeDefinitionId} {
      allow get, list: if true; // Public read access
      allow create, update, delete: if false; // Only server can modify
    }

    /**
     * @description Controls access to node parameters.
     * @path /node_definitions/{nodeDefinitionId}/parameters/{nodeParameterId}
     * @allow (get, list) - Any user can get or list node parameters.
     * @deny (create, update, delete) - No user can create, update, or delete node parameters via client.
     * @principle Provides public read access to node parameters while restricting write access.
     */
    match /node_definitions/{nodeDefinitionId}/parameters/{nodeParameterId} {
      allow get, list: if true; // Public read access
      allow create, update, delete: if false; // Only server can modify
    }
  }
}