/**
 * @file Firebase Security Rules for LionsFlow Platform
 *
 * @core_philosophy This ruleset enforces a strict user-ownership model for user profiles and their associated workflows.
 *   Node definitions and their parameters are globally accessible.
 * @data_structure
 *   - /users/{userId}: Stores user profiles, accessible only by the user themselves.
 *   - /users/{userId}/workflows/{workflowId}: Stores workflows owned by a specific user, accessible only by that user.
 *   - /node_definitions/{nodeDefinitionId}: Stores node definitions, publicly accessible.
 *   - /node_definitions/{nodeDefinitionId}/parameters/{nodeParameterId}: Stores parameters for node definitions, publicly accessible.
 * @key_security_decisions
 *   - User listing is disallowed for privacy.
 *   - Workflows are owned by users and can only be accessed by their respective owners.
 *   - Node definitions and their parameters are globally accessible to simplify application logic.
 * @denormalization_for_authorization
 *   - The `Workflow` documents include the `userId` field, denormalized from the parent `User` document, for authorization independence.
 *     This avoids the need to perform `get()` operations to check user ownership, ensuring faster and more efficient security rules.
 * @structural_segregation
 *   - Private user data (profiles, workflows) is stored under the `/users/{userId}` path.
 *   - Public data (node definitions) is stored in a top-level collection for easy access and management.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secures user profiles, allowing only the owner to read and write their own profile.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user_abc' can create their profile with ID 'user_abc'.
     * @allow (get, update, delete) - User with UID 'user_abc' can read, update, and delete their profile with ID 'user_abc'.
     * @deny (create) - User with UID 'user_xyz' cannot create a profile with ID 'user_abc'.
     * @deny (get, update, delete) - User with UID 'user_xyz' cannot read, update, or delete the profile with ID 'user_abc'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      // Helper function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to check if the user is the owner of the document
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Helper function to check if the user is the existing owner of the document
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      // Allow the user to create their own profile if the userId matches their auth.uid
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;

      // Allow the user to get their own profile
      allow get: if isOwner(userId);

      // Deny listing all users
      allow list: if false;

      // Allow the user to update their own profile, enforcing immutability of the id field
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;

      // Allow the user to delete their own profile
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secures workflows, allowing only the owner to read and write their own workflows.
     * @path /users/{userId}/workflows/{workflowId}
     * @allow (create) - User with UID 'user_abc' can create a workflow under /users/user_abc/workflows/workflow_123.
     * @allow (get, update, delete) - User with UID 'user_abc' can read, update, and delete their workflow.
     * @deny (create) - User with UID 'user_xyz' cannot create a workflow under /users/user_abc/workflows/workflow_123.
     * @deny (get, update, delete) - User with UID 'user_xyz' cannot read, update, or delete the workflow.
     * @principle Enforces document ownership for all operations and validates relational integrity.
     */
    match /users/{userId}/workflows/{workflowId} {
      // Helper function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to check if the user is the owner of the workflow
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Helper function to check if the user is the existing owner of the workflow
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      // Allow the user to create a workflow if the userId matches their auth.uid
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;

      // Allow the user to get their own workflow
      allow get: if isOwner(userId);

      // Allow the owner to list their own workflows
      allow list: if isOwner(userId);

      // Allow the user to update their own workflow, enforcing immutability of the userId field
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;

      // Allow the user to delete their own workflow
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to node definitions. Write access is not permitted.
     * @path /node_definitions/{nodeDefinitionId}
     * @allow (get, list) - Any user can read node definitions.
     * @deny (create, update, delete) - No user can create, update, or delete node definitions.
     * @principle Provides public read access for shared data and restricts write access.
     */
    match /node_definitions/{nodeDefinitionId} {
      // Allow anyone to get node definitions
      allow get, list: if true;

      // Do not allow anyone to create node definitions
      allow create: if false;

      // Do not allow anyone to update node definitions
      allow update: if false;

      // Do not allow anyone to delete node definitions
      allow delete: if false;
    }

    /**
     * @description Allows public read access to node parameters. Write access is not permitted.
     * @path /node_definitions/{nodeDefinitionId}/parameters/{nodeParameterId}
     * @allow (get, list) - Any user can read node parameters.
     * @deny (create, update, delete) - No user can create, update, or delete node parameters.
     * @principle Provides public read access for shared data and restricts write access.
     */
    match /node_definitions/{nodeDefinitionId}/parameters/{nodeParameterId} {
      // Allow anyone to get node parameters
      allow get, list: if true;

      // Do not allow anyone to create node parameters
      allow create: if false;

      // Do not allow anyone to update node parameters
      allow update: if false;

      // Do not allow anyone to delete node parameters
      allow delete: if false;
    }
  }
}